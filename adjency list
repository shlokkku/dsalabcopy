#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the adjacency list
struct Node {
    int data;
    struct Node* next;
};

// Structure to represent the adjacency list for a graph
struct Graph {
    int V; // Number of vertices
    struct Node** adjList; // Array of pointers to adjacency lists
};

// Function to create a new node with the given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->adjList = (struct Node**)malloc(V * sizeof(struct Node*));

    for (int i = 0; i < V; i++) {
        graph->adjList[i] = NULL;
    }

    return graph;
}

// Function to add an edge from vertex u to vertex v
void addEdge(struct Graph* graph, int u, int v) {
    struct Node* newNode = createNode(v);
    newNode->next = graph->adjList[u];
    graph->adjList[u] = newNode;
}

// Function to delete an edge from vertex u to vertex v
void deleteEdge(struct Graph* graph, int u, int v) {
    struct Node* current = graph->adjList[u];
    struct Node* previous = NULL;

    while (current != NULL && current->data != v) {
        previous = current;
        current = current->next;
    }

    if (current == NULL) {
        printf("Edge from %d to %d not found.\n", u, v);
        return;
    }

    if (previous == NULL) {
        // If the edge is the first in the list
        graph->adjList[u] = current->next;
    } else {
        previous->next = current->next;
    }

    free(current);
}

// Function to display the adjacency list
void displayGraph(struct Graph* graph) {
    for (int i = 0; i < graph->V; i++) {
        struct Node* current = graph->adjList[i];
        printf("Adjacency list of vertex %d: ", i);
        while (current != NULL) {
            printf("%d -> ", current->data);
            current = current->next;
        }
        printf("NULL\n");
    }
}

int main() {
    int V, u, v, choice;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);

    struct Graph* graph = createGraph(V);

    while (1) {
        printf("\nGraph Operations\n");
        printf("1. Add Edge\n");
        printf("2. Delete Edge\n");
        printf("3. Display Graph\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter edge (u v): ");
                scanf("%d %d", &u, &v);
                addEdge(graph, u, v);
                break;
            case 2:
                printf("Enter edge to delete (u v): ");
                scanf("%d %d", &u, &v);
                deleteEdge(graph, u, v);
                break;
            case 3:
                displayGraph(graph);
                break;
            case 4:
                exit(0);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
