#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure to represent a node in the adjacency list
struct Node {
    int data;
    struct Node* next;
};

// Structure to represent the adjacency list for a graph
struct Graph {
    int V; // Number of vertices
    struct Node** adjList; // Array of pointers to adjacency lists
};

// Structure to represent a queue for BFS
struct Queue {
    int front, rear;
    int* array;
    unsigned capacity;
};

// Function to create a new node with the given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->adjList = (struct Node**)malloc(V * sizeof(struct Node*));

    for (int i = 0; i < V; i++) {
        graph->adjList[i] = NULL;
    }

    return graph;
}

// Function to add an edge from vertex u to vertex v
void addEdge(struct Graph* graph, int u, int v) {
    struct Node* newNode = createNode(v);
    newNode->next = graph->adjList[u];
    graph->adjList[u] = newNode;
}

// Function to create a new queue of the given capacity
struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}

// Function to check if the queue is full
bool isFull(struct Queue* queue) {
    return (queue->rear == queue->capacity - 1);
}

// Function to check if the queue is empty
bool isEmpty(struct Queue* queue) {
    return (queue->front == -1);
}

// Function to enqueue an item into the queue
void enqueue(struct Queue* queue, int item) {
    if (isFull(queue)) {
        return;
    }
    if (isEmpty(queue)) {
        queue->front = 0;
    }
    queue->rear++;
    queue->array[queue->rear] = item;
}

// Function to dequeue an item from the queue
int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        return -1; // Return -1 for an empty queue
    }
    int item = queue->array[queue->front];
    if (queue->front == queue->rear) {
        queue->front = queue->rear = -1;
    } else {
        queue->front++;
    }
    return item;
}

// Function to perform Breadth-First Search (BFS) starting from vertex v
void BFS(struct Graph* graph, int v) {
    bool* visited = (bool*)malloc(graph->V * sizeof(bool));
    for (int i = 0; i < graph->V; i++) {
        visited[i] = false;
    }

    struct Queue* queue = createQueue(graph->V);

    visited[v] = true;
    enqueue(queue, v);

    printf("Breadth-First Search starting from vertex %d: ", v);

    while (!isEmpty(queue)) {
        v = dequeue(queue);
        printf("%d ", v);

        struct Node* current = graph->adjList[v];
        while (current != NULL) {
            if (!visited[current->data]) {
                visited[current->data] = true;
                enqueue(queue, current->data);
            }
            current = current->next;
        }
    }

    printf("\n");

    free(visited);
    free(queue->array);
    free(queue);
}

int main() {
    int V, u, v, startVertex;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &V);

    struct Graph* graph = createGraph(V);

    while (1) {
        int choice;
        printf("\nGraph Operations\n");
        printf("1. Add Edge\n");
        printf("2. Breadth-First Search (BFS)\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter edge (u v): ");
                scanf("%d %d", &u, &v);
                addEdge(graph, u, v);
                break;
            case 2:
                printf("Enter the starting vertex for BFS: ");
                scanf("%d", &startVertex);
                BFS(graph, startVertex);
                break;
            case 3:
                exit(0);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
